#let cv-color = rgb("#284967")
#set page(margin: (x: 0.9cm, y: 1.0cm))
#set text(font: "Noto Sans CJK SC", size: 10pt)
#set par(justify: true)
#let chiline = {
  v(-8pt)
  line(stroke: cv-color, length: 100%)
  v(-2pt)
}
#show "|": text(gray, " | ")
#show heading.where(level: 1): it => text(fill: rgb("#222222"), size: 20pt, it) + v(5pt)
#show heading.where(level: 2): it => text(cv-color, it) + chiline
#let item(a, b, c) = grid(
  columns: (20%, 1fr, 30%),
  align: (left, center, right),
  text(fill: rgb("#222222"), weight: "bold", a),
  text(rgb("#222222"), weight: "bold", b),
  text(rgb("#222222"), weight: "bold", c),
)

// -------------------------------------------------------------------
// 个人简历正文
// -------------------------------------------------------------------


#grid(
  columns: (1fr, auto),
  align(center)[
    = 刘罡

    #set text(rgb("#333333"))

    // 某某岁 | 某某成员 | 某某地区
    
    (+86) 18707530177 | liugscho\@163.com | github.com/Gangliu0036
  ], image(width: 70pt, "../profile.jpg")
)

#set text(rgb("#444444"))

== 教育背景

#item[2023.09 \~ 2026.06(预计)][深圳大学][光电信息工程（硕士）]

*专业成绩：*GPA 3.63 / 4.0

// *研究方向*：量子计算与量子信息

#item[2019.09 \~ 2023.06][深圳大学][光电信息科学与工程（本科）]

*专业成绩：*GPA 3.7 / 4.5

*语言能力*：大学英语六级（CET-6）,普通话二级甲等

*获奖情况*：研究生学业一等奖学金，第十九届“挑战杯”全国大学生课外学术科技作品竞赛（量子计算赛道）国家二等奖

// *主修课程：*某某专业课程、某某实践课程、某某选修课程、某某技能课程、某某综合课程等。

// == 科研竞赛

// #item[某某年某月 \~ 某某年某月][某某全国性竞赛 / 某某级别奖项][某某职责]

// *项目背景：*针对某某社会现象开展深入研究，围绕某某主题进行系统分析，为解决某某实际问题提供建设性意见。

// *项目内容：*运用某某专业软件处理某某规模数据，采用某某分析方法进行数据处理，使用某某模型进行分析，最终形成完整的研究报告。通过某某技术手段提升了某某效率，获得某某评价。

// #item[某某年某月 \~ 某某年某月][某某创新项目 / 某某等级][项目负责人]

// *项目背景：*致力于解决某某领域存在的某某问题，旨在为某某发展方向提供某某参考建议。

// *项目内容：*采用某某研究方法，针对某某地区开展某某调查。通过某某途径收集某某数量的有效数据。使用某某分析工具进行数据处理，运用某某分析方法得出某某结论，完成某某成果输出。

// == 实习经历

// #item[某某年某月 \~ 某某年某月][某某知名企业][某某岗位实习生]

// *工作内容1：*负责某某具体工作，完成某某工作目标，获得某某认可。

// *工作内容2：*参与某某项目开展，熟练使用某某系统，针对某某数据进行分析，制定某某策略。

// == 实践经历

// #item[某某年某月 \~ 至今][某某机构某某部门][某某职务]

// *工作职责1：*负责某某具体事务，合理安排某某工作。

// *工作职责2：*参与组织某某活动，开展某某工作，达成某某目标。

// #item[某某年某月 \~ 某某年某月][某某志愿服务项目][志愿者]
// 参与某某活动的现场协调与管理工作，完成某某服务任务。

== 专业技能
- 熟悉C/C++，熟练使用指针操作及内存管理，掌握C++面向对象特性（封装/继承/多态），熟悉STL常用容器与算法，熟练应用C++11特性（智能指针/移动语义等），了解Go、Python语言基础语法

- 熟悉常用数据结构（链表/栈/队列/二叉树/哈希表），掌握基础算法（排序/搜索/贪心/动态规划），具备LeetCode算法题解决能力

- 熟悉计算机网络体系结构（OSI七层模型/TCP/IP四层模型），深入理解TCP/UDP协议特性，掌握TCP连接管理（三次握手/四次挥手）、流量控制、拥塞控制等机制

- 熟悉Linux系统开发环境，掌握网络编程与I/O多路复用技术（select/poll/epoll），理解Reactor线程池模型实现原理

- 熟练使用MySQL数据库，熟悉索引优化（B+树结构）、事务管理（ACID特性）、存储引擎（InnoDB/MyISAM）、锁机制（表锁/行锁）等核心机制

- 熟悉操作系统核心概念，包括进程通信（管道/消息队列/共享内存）、死锁预防（银行家算法）、内存管理（分页/分段/虚拟内存）等机制

- 具备Cursor等智能编程辅助工具使用经验和本地化部署大模型经验。在科研阶段曾基于llama.cpp部署本地大模型（支持4-bit量化），实现私有化文档问答系统，模型显存占用降低60%。


== 项目经历
#item[2025.03 \~ 2025.06][个人项目][高并发文件服务系统（C++/libevent）]

*项目背景*: 设计高性能分布式文件服务系统，支持PB级数据存储与10k+并发连接，解决传统同步日志导致的I/O瓶颈问题（从15ms/op优化至2.3ms/op）

*核心技术架构*:
- *网络层*：基于libevent实现Reactor线程池模型，采用one loop per thread架构，通过epoll ET模式实现事件驱动（ET优于LT避免重复触发，减少系统调用30%）
- *异步日志*：双缓冲队列+生产者消费者模型实现日志解耦，前端线程写入A缓冲，后端线程批量刷新B缓冲至磁盘，缓冲交换通过条件变量通知，批量写入将IOPS从6.5k提升至18.2k
- *存储优化*：实现三级存储架构（Redis热数据/SSD温数据/HDD冷数据），基于LRU-K算法（K=2）降低缓存污染，冷数据采用zlib level 5压缩节省37%存储空间
- *并发控制*：元数据哈希表采用细粒度读写锁（shared_mutex）实现无锁读并发，写操作通过独占锁保证线程安全，相比全局锁提升读吞吐4.2倍

*性能优化实践*:
- *零拷贝传输*：应用sendfile系统调用减少用户态/内核态切换，避免4次数据拷贝降低CPU占用率28%
- *内存管理*：采用jemalloc替换ptmalloc2，通过thread cache和size class机制降低内存碎片率15%，配合对象池模式复用Buffer对象
- *日志压缩*：实现滚动备份策略（单文件限制100MB），定期压缩归档历史日志，7天自动清理降低磁盘占用82%

*技术指标*: 2核4G环境下QPS达8.5k（较同步版本提升42.6%），峰值吞吐130MB/s，P99延迟$<5"ms"$，支持128线程并发写入日志无数据丢失

#pagebreak()

#item[2025.01 \~ 2025.03][个人项目][分布式KV存储（Raft/C++）]

*项目背景*: 实现强一致性分布式键值数据库，解决CAP理论中CP场景需求，支持(N/2)-1节点故障下的高可用性（5节点集群可容忍2节点宕机）

*Raft共识算法实现*:
- *领导者选举*：Follower心跳超时（150-300ms随机化避免选票分裂）后转为Candidate，递增Term并行发送RequestVote RPC，获取多数票（⌈N/2⌉+1）后成为Leader
- *日志复制*：Leader接收客户端请求后追加本地日志，通过AppendEntries RPC并行复制至Follower，采用流水线批处理（batch size=128）提升吞吐，当多数节点持久化后更新commitIndex并apply到状态机
- *安全性保证*：实现Log Matching Property（相同index和term的日志内容相同）、Leader Completeness（已提交日志不会丢失）、State Machine Safety（不同节点相同index执行相同命令）

*存储引擎设计*:
- *SkipListPro跳表*：实现4层索引结构（平衡查询O(logN)与空间占用），通过CAS原子操作实现无锁并发读，写操作采用mutex保护关键路径
- *持久化机制*：实现WAL（Write-Ahead Log）保证数据持久性，采用mmap映射磁盘文件减少系统调用，定期生成Snapshot压缩日志（保留最近10k条日志+全量快照）
- *内存优化*：跳表节点采用flexible array member降低内存碎片，实现lazy deletion延迟回收内存，空间利用率达98%

*RPC通信框架*:
- 基于protobuf序列化（IDL定义RequestVote/AppendEntries消息体），自定义二进制协议（header+body）实现TCP流式传输
- 采用Muduo网络库实现非阻塞I/O，通过epoll+线程池处理并发RPC，实现连接池复用TCP连接降低握手开销

*容错与一致性*:
- *脑裂处理*：通过Term机制检测网络分区，旧Leader收到更高Term拒绝请求并转为Follower
- *线性一致性*：客户端请求携带序列号，Leader通过(ClientID+SeqNo)去重实现幂等性，成功应用后返回响应
- *测试验证*：通过Jepsen测试框架注入网络分区/节点崩溃/时钟漂移等故障，验证线性一致性无违反

*性能数据*: 10节点集群处理200k+日志条目，RPC框架QPS达12k（P99延迟1.5ms），支持10M级键值对毫秒级查询，自动故障转移时间$<500"ms"$

== 自我评价

1. 有较强的信息检索能力，擅长坚决疑难杂症，通过Google、Github、StackOverflow等国外论坛/文档解决技术问题.

2. 与时俱进，拥抱AI，在开发过程中会使用大模型帮助理解难懂错误堆栈和调试思路，提高自身开发效率。

3. 在开发中对待问题具有认真求索的精神，够在短时间内解决问题并理解知识点，严格要求自己遵守编码规范，这使我少写了很多 bug。